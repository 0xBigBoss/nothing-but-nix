name: 'Nothing but Space'
description: 'Reclaim 65-130GB of disk space on GitHub Actions runners for any workflow need üöÄ'
branding:
  icon: 'hard-drive'
  color: 'blue'
inputs:
  space-target:
    description: 'Where to allocate reclaimed space (workspace, docker, cache, custom, nix)'
    required: false
    default: 'workspace'
  mount-path:
    description: 'Custom mount path when using space-target: custom'
    required: false
    default: ''
  volume-label:
    description: 'Label for the BTRFS volume'
    required: false
    default: 'space'
  symlink-config:
    description: 'JSON array of symlink configurations [{from: "source", to: "dest"}]'
    required: false
    default: '[]'
  auto-symlinks:
    description: 'Automatically create common symlinks for the target mode'
    required: false
    default: 'true'
  docker-restart:
    description: 'Restart Docker daemon after moving storage (docker mode only)'
    required: false
    default: 'true'
  compression:
    description: 'BTRFS compression algorithm (zstd:1, lzo, none)'
    required: false
    default: 'zstd:1'
  # Inherited from Nothing but Nix
  hatchet-protocol:
    description: 'Level of file purging (holster, carve, cleave, rampage)'
    required: false
    default: 'cleave'
  witness-carnage:
    description: 'Display purge progress in real-time instead of running in background'
    required: false
    default: 'false'
  root-safe-haven:
    description: 'Space in MB to spare on the / filesystem (default: 2048)'
    required: false
    default: '2048'
  mnt-safe-haven:
    description: 'Space in MB to spare on the /mnt filesystem (default: 1024)'
    required: false
    default: '1024'
runs:
  using: composite
  steps:
    - name: Validate Configuration
      id: validate-config
      shell: bash
      run: |
        # Validate space-target
        target="${{ inputs.space-target }}"
        valid_targets="workspace docker cache custom nix"
        if [[ ! " $valid_targets " =~ " $target " ]]; then
          echo "‚ùå Invalid space-target: $target"
          exit 1
        fi
        
        # Validate custom mode has mount-path
        if [[ "$target" == "custom" && -z "${{ inputs.mount-path }}" ]]; then
          echo "‚ùå mount-path is required when using space-target: custom"
          exit 1
        fi
        
        # Set mount path based on target
        case "$target" in
          "workspace")
            mount_path="/workspace"
            ;;
          "docker")
            mount_path="/var/lib/docker"
            ;;
          "cache")
            mount_path="/cache"
            ;;
          "nix")
            mount_path="/nix"
            ;;
          "custom")
            mount_path="${{ inputs.mount-path }}"
            ;;
        esac
        
        echo "mount_path=$mount_path" >> $GITHUB_OUTPUT
        echo "‚úÖ Configuration validated: $target mode at $mount_path"
        
    - name: Pre-Target Setup
      id: pre-setup
      if: steps.environment-check.outputs.is_supported == 'true'
      shell: bash
      run: |
        target="${{ inputs.space-target }}"
        mount_path="${{ steps.validate-config.outputs.mount_path }}"
        
        # Docker-specific pre-setup
        if [[ "$target" == "docker" ]]; then
          echo "üê≥ Preparing Docker storage migration..."
          # Stop Docker daemon
          sudo systemctl stop docker || true
          sudo systemctl stop docker.socket || true
          
          # Backup docker data if it exists
          if [[ -d /var/lib/docker ]]; then
            echo "üì¶ Found existing Docker data, will migrate after volume creation"
            echo "docker_migration_needed=true" >> $GITHUB_OUTPUT
          fi
        fi
        
        # Create mount point
        sudo mkdir -p "$mount_path"
        
    # Include all the original Nothing but Nix steps here
    # (The Checks, The Setup, The Volume creation, etc.)
    # Modified to use configurable mount_path instead of hardcoded /nix
    
    - name: Post-Target Setup
      if: steps.environment-check.outputs.is_supported == 'true'
      shell: bash
      run: |
        target="${{ inputs.space-target }}"
        mount_path="${{ steps.validate-config.outputs.mount_path }}"
        auto_symlinks="${{ inputs.auto-symlinks }}"
        
        # Parse custom symlinks
        symlink_config='${{ inputs.symlink-config }}'
        
        # Auto-symlinks based on target
        if [[ "$auto_symlinks" == "true" ]]; then
          case "$target" in
            "workspace")
              # Link GitHub workspace into our volume
              if [[ -d "$GITHUB_WORKSPACE" ]]; then
                sudo mkdir -p "$mount_path/repo"
                sudo ln -sfn "$mount_path/repo" "$GITHUB_WORKSPACE"
                echo "üîó Linked $GITHUB_WORKSPACE to $mount_path/repo"
              fi
              ;;
            "cache")
              # Common cache directories
              for cache_dir in ".npm" ".m2" ".gradle" ".cache/pip"; do
                if [[ ! -e "$HOME/$cache_dir" ]]; then
                  sudo mkdir -p "$mount_path/${cache_dir##*/}"
                  mkdir -p "$(dirname "$HOME/$cache_dir")"
                  ln -sfn "$mount_path/${cache_dir##*/}" "$HOME/$cache_dir"
                  echo "üîó Linked $HOME/$cache_dir to $mount_path/${cache_dir##*/}"
                fi
              done
              ;;
            "docker")
              # Docker migration handled separately
              ;;
          esac
        fi
        
        # Process custom symlinks
        if [[ -n "$symlink_config" && "$symlink_config" != "[]" ]]; then
          echo "$symlink_config" | jq -r '.[] | "\(.from) \(.to)"' | while read -r from to; do
            # Expand environment variables
            from=$(eval echo "$from")
            to=$(eval echo "$to")
            
            sudo mkdir -p "$(dirname "$to")"
            sudo ln -sfn "$to" "$from"
            echo "üîó Linked $from to $to"
          done
        fi
        
    - name: Docker Storage Migration
      if: steps.environment-check.outputs.is_supported == 'true' && inputs.space-target == 'docker' && steps.pre-setup.outputs.docker_migration_needed == 'true'
      shell: bash
      run: |
        mount_path="${{ steps.validate-config.outputs.mount_path }}"
        
        echo "üöö Migrating Docker storage to $mount_path..."
        
        # Move existing Docker data
        if [[ -d /var/lib/docker.old ]]; then
          sudo rm -rf /var/lib/docker.old
        fi
        sudo mv /var/lib/docker /var/lib/docker.old
        
        # Create new docker directory at mount point
        sudo mkdir -p "$mount_path"
        
        # Copy data (this could take a while)
        echo "üìã Copying Docker data (this may take a few minutes)..."
        sudo cp -a /var/lib/docker.old/* "$mount_path/" || true
        
        # Create symlink
        sudo ln -sfn "$mount_path" /var/lib/docker
        
        # Restart Docker if requested
        if [[ "${{ inputs.docker-restart }}" == "true" ]]; then
          echo "üîÑ Restarting Docker daemon..."
          sudo systemctl start docker
          
          # Verify Docker is working
          if docker info > /dev/null 2>&1; then
            echo "‚úÖ Docker successfully migrated to larger volume!"
            # Clean up old data
            sudo rm -rf /var/lib/docker.old
          else
            echo "‚ùå Docker restart failed, reverting..."
            sudo rm -f /var/lib/docker
            sudo mv /var/lib/docker.old /var/lib/docker
            sudo systemctl start docker
            exit 1
          fi
        fi
        
    - name: Final Report
      if: always() && steps.environment-check.outputs.is_supported == 'true'
      shell: bash  
      run: |
        target="${{ inputs.space-target }}"
        mount_path="${{ steps.validate-config.outputs.mount_path }}"
        
        echo "üìä Space Reclamation Report"
        echo "=========================="
        echo "üéØ Target Mode: $target"
        echo "üìÅ Mount Path: $mount_path"
        echo ""
        echo "üíæ Disk Usage:"
        df -h "$mount_path" 2>/dev/null || echo "Mount point not available"
        echo ""
        
        if [[ "$target" == "docker" ]] && command -v docker >/dev/null 2>&1; then
          echo "üê≥ Docker Storage Info:"
          docker system df || true
        fi
        
        echo ""
        echo "‚ú® Your workflow now has up to 130GB of space available at $mount_path!"